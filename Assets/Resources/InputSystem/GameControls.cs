//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/InputSystem/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Volume"",
            ""id"": ""06aa8dc9-93f4-4689-a6f1-6ddc32d3b304"",
            ""actions"": [
                {
                    ""name"": ""StartOfSplitting"",
                    ""type"": ""Button"",
                    ""id"": ""e56ac3b8-1eb8-49bb-9b00-5b3873a03ce4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndOfSplitting"",
                    ""type"": ""Button"",
                    ""id"": ""5dc88c4e-d633-4725-b1aa-0ed0085da733"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f31715f-e597-41d4-99e3-310ff83bdd3b"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartOfSplitting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42a8db9f-ed39-4955-b7ba-20030c507179"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartOfSplitting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""784fd3bf-5594-4c3c-ab6d-0bc36f1ab20d"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndOfSplitting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f500cf3f-5a3b-4f8f-a2b5-e942c7b243e5"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndOfSplitting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Volume
        m_Volume = asset.FindActionMap("Volume", throwIfNotFound: true);
        m_Volume_StartOfSplitting = m_Volume.FindAction("StartOfSplitting", throwIfNotFound: true);
        m_Volume_EndOfSplitting = m_Volume.FindAction("EndOfSplitting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Volume
    private readonly InputActionMap m_Volume;
    private IVolumeActions m_VolumeActionsCallbackInterface;
    private readonly InputAction m_Volume_StartOfSplitting;
    private readonly InputAction m_Volume_EndOfSplitting;
    public struct VolumeActions
    {
        private @GameControls m_Wrapper;
        public VolumeActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartOfSplitting => m_Wrapper.m_Volume_StartOfSplitting;
        public InputAction @EndOfSplitting => m_Wrapper.m_Volume_EndOfSplitting;
        public InputActionMap Get() { return m_Wrapper.m_Volume; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VolumeActions set) { return set.Get(); }
        public void SetCallbacks(IVolumeActions instance)
        {
            if (m_Wrapper.m_VolumeActionsCallbackInterface != null)
            {
                @StartOfSplitting.started -= m_Wrapper.m_VolumeActionsCallbackInterface.OnStartOfSplitting;
                @StartOfSplitting.performed -= m_Wrapper.m_VolumeActionsCallbackInterface.OnStartOfSplitting;
                @StartOfSplitting.canceled -= m_Wrapper.m_VolumeActionsCallbackInterface.OnStartOfSplitting;
                @EndOfSplitting.started -= m_Wrapper.m_VolumeActionsCallbackInterface.OnEndOfSplitting;
                @EndOfSplitting.performed -= m_Wrapper.m_VolumeActionsCallbackInterface.OnEndOfSplitting;
                @EndOfSplitting.canceled -= m_Wrapper.m_VolumeActionsCallbackInterface.OnEndOfSplitting;
            }
            m_Wrapper.m_VolumeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartOfSplitting.started += instance.OnStartOfSplitting;
                @StartOfSplitting.performed += instance.OnStartOfSplitting;
                @StartOfSplitting.canceled += instance.OnStartOfSplitting;
                @EndOfSplitting.started += instance.OnEndOfSplitting;
                @EndOfSplitting.performed += instance.OnEndOfSplitting;
                @EndOfSplitting.canceled += instance.OnEndOfSplitting;
            }
        }
    }
    public VolumeActions @Volume => new VolumeActions(this);
    public interface IVolumeActions
    {
        void OnStartOfSplitting(InputAction.CallbackContext context);
        void OnEndOfSplitting(InputAction.CallbackContext context);
    }
}
