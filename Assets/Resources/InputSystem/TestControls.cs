//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/InputSystem/TestControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestControls"",
    ""maps"": [
        {
            ""name"": ""AndroidTest"",
            ""id"": ""87f5e291-6496-4846-b571-6de353b61b06"",
            ""actions"": [
                {
                    ""name"": ""ScreenPress"",
                    ""type"": ""Button"",
                    ""id"": ""83256ddb-bc26-460a-88ea-e08a38ce44da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScreenRelease"",
                    ""type"": ""Button"",
                    ""id"": ""8b7779d4-2d86-4746-9dcf-1e27c36d6991"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b3111c3-36b1-47e6-8021-edc7a8c27256"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""512bfeae-6b5c-47ed-a021-bbd2fad81e3b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PCTest"",
            ""id"": ""8bd9044a-6e76-40fb-99da-7c23885d735e"",
            ""actions"": [
                {
                    ""name"": ""ScreenPress"",
                    ""type"": ""Button"",
                    ""id"": ""ee90801c-a421-4be3-9270-ebfbf154f411"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ad4b92e0-f46f-4f5d-a93b-a163ffe00db5"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AndroidTest
        m_AndroidTest = asset.FindActionMap("AndroidTest", throwIfNotFound: true);
        m_AndroidTest_ScreenPress = m_AndroidTest.FindAction("ScreenPress", throwIfNotFound: true);
        m_AndroidTest_ScreenRelease = m_AndroidTest.FindAction("ScreenRelease", throwIfNotFound: true);
        // PCTest
        m_PCTest = asset.FindActionMap("PCTest", throwIfNotFound: true);
        m_PCTest_ScreenPress = m_PCTest.FindAction("ScreenPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AndroidTest
    private readonly InputActionMap m_AndroidTest;
    private IAndroidTestActions m_AndroidTestActionsCallbackInterface;
    private readonly InputAction m_AndroidTest_ScreenPress;
    private readonly InputAction m_AndroidTest_ScreenRelease;
    public struct AndroidTestActions
    {
        private @TestControls m_Wrapper;
        public AndroidTestActions(@TestControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPress => m_Wrapper.m_AndroidTest_ScreenPress;
        public InputAction @ScreenRelease => m_Wrapper.m_AndroidTest_ScreenRelease;
        public InputActionMap Get() { return m_Wrapper.m_AndroidTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidTestActions set) { return set.Get(); }
        public void SetCallbacks(IAndroidTestActions instance)
        {
            if (m_Wrapper.m_AndroidTestActionsCallbackInterface != null)
            {
                @ScreenPress.started -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenPress;
                @ScreenPress.performed -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenPress;
                @ScreenPress.canceled -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenPress;
                @ScreenRelease.started -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenRelease;
                @ScreenRelease.performed -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenRelease;
                @ScreenRelease.canceled -= m_Wrapper.m_AndroidTestActionsCallbackInterface.OnScreenRelease;
            }
            m_Wrapper.m_AndroidTestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ScreenPress.started += instance.OnScreenPress;
                @ScreenPress.performed += instance.OnScreenPress;
                @ScreenPress.canceled += instance.OnScreenPress;
                @ScreenRelease.started += instance.OnScreenRelease;
                @ScreenRelease.performed += instance.OnScreenRelease;
                @ScreenRelease.canceled += instance.OnScreenRelease;
            }
        }
    }
    public AndroidTestActions @AndroidTest => new AndroidTestActions(this);

    // PCTest
    private readonly InputActionMap m_PCTest;
    private IPCTestActions m_PCTestActionsCallbackInterface;
    private readonly InputAction m_PCTest_ScreenPress;
    public struct PCTestActions
    {
        private @TestControls m_Wrapper;
        public PCTestActions(@TestControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ScreenPress => m_Wrapper.m_PCTest_ScreenPress;
        public InputActionMap Get() { return m_Wrapper.m_PCTest; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCTestActions set) { return set.Get(); }
        public void SetCallbacks(IPCTestActions instance)
        {
            if (m_Wrapper.m_PCTestActionsCallbackInterface != null)
            {
                @ScreenPress.started -= m_Wrapper.m_PCTestActionsCallbackInterface.OnScreenPress;
                @ScreenPress.performed -= m_Wrapper.m_PCTestActionsCallbackInterface.OnScreenPress;
                @ScreenPress.canceled -= m_Wrapper.m_PCTestActionsCallbackInterface.OnScreenPress;
            }
            m_Wrapper.m_PCTestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ScreenPress.started += instance.OnScreenPress;
                @ScreenPress.performed += instance.OnScreenPress;
                @ScreenPress.canceled += instance.OnScreenPress;
            }
        }
    }
    public PCTestActions @PCTest => new PCTestActions(this);
    public interface IAndroidTestActions
    {
        void OnScreenPress(InputAction.CallbackContext context);
        void OnScreenRelease(InputAction.CallbackContext context);
    }
    public interface IPCTestActions
    {
        void OnScreenPress(InputAction.CallbackContext context);
    }
}
